{"version":3,"sources":["helper.js","components/Header.js","components/Input.js","components/DisplayResult.js","index.js"],"names":["isNum","char","num","parseInt","isNaN","calculate","a","b","op","evaluateExpression","exp","stack","buf","i","length","console","log","push","second","pop","answer","Header","props","className","title","class","href","link","defaultProps","Input","onSubmit","handleExpression","name","type","placeholder","value","DisplayResult","defaultValue","disabled","PostFix","state","undefined","error","e","preventDefault","expression","target","elements","trimStart","setState","evaluate","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"kOAAA,SAASA,EAAOC,GAEZ,IAAIC,EAAMC,SAASF,GACnB,OAAQG,MAAMF,GASlB,SAASG,EAAUC,EAAGC,EAAGC,GAErB,MAAU,MAAPA,EAAmBF,EAAIC,EACX,MAAPC,EAAmBF,EAAIC,EAChB,MAAPC,EAAmBF,EAAIC,EACnBD,EAAIC,EA+CLE,MA7Cf,SAA6BC,GAIzB,IAFA,IAfWF,EAeLG,EAAQ,GACVC,EAAM,GACFC,EAAI,EAAGA,EAAIH,EAAII,OAAQD,IAE1B,GAAGb,EAAMU,EAAIG,IAEVD,GAAOF,EAAIG,GACXE,QAAQC,IAAI,QAAUJ,EAAM,WAE1B,GAtBA,OAFCJ,EAwBOE,EAAIG,KAtBE,MAAPL,GAAqB,MAAPA,GAAqB,MAAPA,EAuBxC,CAII,GAFGI,IAAMD,EAAMM,KAAKd,SAASS,IAAOA,EAAM,MAEvCD,EAAMG,OAAS,GAWf,OAAQ,EATR,IAAII,EAAUP,EAAMQ,MAEhBC,EAAUf,EADAM,EAAMQ,MACWD,EAAQR,EAAIG,IAE3CF,EAAMM,KAAKG,OAQC,MAAXV,EAAIG,IAGG,KAARD,IAEAD,EAAMM,KAAKd,SAASS,IACpBA,EAAM,IAMlB,OAAOD,EAAMQ,OC3DjB,SAASE,EAAQC,GAEb,OACI,yBAAKC,UAAU,UACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,iBAAiBD,EAAME,OACrC,uBAAGC,MAAM,OAAOC,KAAMJ,EAAMK,MAA5B,eAKhBN,EAAOO,aAAe,CAACJ,MAAO,YAEfH,QCZf,SAASQ,EAAOP,GAEZ,OACI,0BAAMC,UAAU,OAAOO,SAAUR,EAAMS,kBACnC,2BAAOR,UAAU,cAAcS,KAAK,MAAMC,KAAK,OAAOC,YAAa,qBAAuBZ,EAAMa,QAChG,4BAAQZ,UAAU,SAASU,KAAK,UAAhC,aAIZJ,EAAMD,aAAe,CACjBO,MAAO,2BAGIN,QCPAO,MAPf,SAAuBd,GAEnB,OAAQ,6BACI,8BAAUC,UAAU,UAAUc,aAAcf,EAAMF,OAAQkB,UAAU,MCK9EC,E,2MACFC,MAAQ,CACJpB,YAAQqB,EACRC,WAAOD,G,EAEXV,iBAAmB,SAACY,GAEhBA,EAAEC,iBACF,IAAIC,EAAaF,EAAEG,OAAOC,SAASrC,IAAIyB,MAAMa,YAC7C,GAAkB,KAAfH,EAEC,EAAKI,SAAS,CAACP,MAAO,8BAG1B,CAEI,IAAItB,EAAS8B,EAASL,IAEP,IAAZzB,QAA4BqB,IAAXrB,EAChB,EAAK6B,SAAS,CACV7B,YAAQqB,EACRC,MAAM,oCAIV,EAAKO,SAAS,CACV7B,OAAQA,EACRsB,WAAOD,IAEXE,EAAEG,OAAOC,SAASrC,IAAIyB,MAAQ,M,wEAQtC,OAAQ,6BACI,kBAAC,EAAD,CAAQR,KAFT,uCAEqBH,MAHpB,kCAIA,yBAAKD,UAAU,aAGP4B,KAAKX,MAAME,OACX,uBAAGnB,UAAU,aAAc4B,KAAKX,MAAME,OAE1C,kBAAC,EAAD,CAAOX,iBAAkBoB,KAAKpB,mBAC9B,kBAAC,EAAD,CAAeX,OAAQ+B,KAAKX,MAAMpB,e,GA9CpCgC,IAAMC,WAoD5BC,IAASC,OAAO,kBAAC,EAAD,MAAaC,SAASC,eAAe,U","file":"static/js/main.c675e6ac.chunk.js","sourcesContent":["function isNum (char)\r\n{\r\n    let num = parseInt(char);\r\n    return !isNaN(num);\r\n}\r\n\r\nfunction isOp (op)\r\n{\r\n    if(op === '+' || op === '-' || op === '*' || op === '/') return true;\r\n    return false;\r\n}\r\n\r\nfunction calculate(a, b, op)\r\n{\r\n    if(op === '+') return a + b;\r\n    else if(op === '-') return a - b;\r\n    else if(op === '*') return a * b;\r\n    else return a / b;\r\n}\r\nfunction evaluateExpression (exp)\r\n{\r\n    const stack = [];\r\n    let buf = \"\";\r\n    for(let i = 0; i < exp.length; i++)\r\n    {\r\n         if(isNum(exp[i]))\r\n         {\r\n            buf += exp[i];\r\n            console.log(\"buf: \" + buf + \"\\n\")\r\n         }\r\n         else if(isOp(exp[i]))\r\n         {\r\n             //Incase there's an operator immediately after the operand like so \"(10 20)-\" or \"10 3+\"\r\n             if(buf) {stack.push(parseInt(buf)); buf = \"\";}\r\n\r\n             if(stack.length > 1)\r\n             {\r\n                let second  = stack.pop(),\r\n                    first   = stack.pop(),\r\n                    answer  = calculate(first, second, exp[i]);\r\n                \r\n                stack.push(answer);\r\n                // console.log(answer+ \" pushed on stack\")\r\n             }\r\n             else\r\n             {\r\n                return -1;\r\n             }\r\n         }\r\n         else if(exp[i] === ' ')\r\n         {\r\n             //check if buf has a value before pushing onto stack\r\n             if(buf !== \"\")\r\n             {\r\n                stack.push(parseInt(buf));\r\n                buf = \"\";\r\n             }\r\n         }\r\n\r\n    }\r\n\r\n    return stack.pop();\r\n}\r\n\r\nexport default evaluateExpression;","import React from 'react';\r\n\r\nfunction Header (props)\r\n{\r\n    return (\r\n        <nav className=\"header\">\r\n            <div className=\"container\">\r\n                <h1 className=\"header__title\">{props.title}</h1>\r\n                <a class=\"link\" href={props.link}>Portfolio</a>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\nHeader.defaultProps = {title: \"No title\"};\r\n\r\nexport default Header;","import React from 'react';\r\n\r\n\r\nfunction Input (props)\r\n{\r\n    return (\r\n        <form className=\"form\" onSubmit={props.handleExpression}>\r\n            <input className=\"form__input\" name=\"exp\" type=\"text\" placeholder={\"Enter expression. \" + props.value}></input>\r\n            <button className=\"button\" type=\"submit\">Evaluate</button>\r\n        </form>\r\n    );\r\n}\r\nInput.defaultProps = {\r\n    value: \"Example (2 3 1 * + 9 -)\"\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\n\r\nfunction DisplayResult(props)\r\n{\r\n    return (<div >\r\n                <textarea className=\"display\" defaultValue={props.answer} disabled={true}></textarea>\r\n            </div>);\r\n}\r\n\r\nexport default DisplayResult;","import  React          from 'react';\nimport  ReactDOM       from 'react-dom';\nimport  './style/App.css';\nimport  evaluate       from './helper';\nimport  Header         from './components/Header';\nimport  Input          from './components/Input';\nimport  DisplayResult  from './components/DisplayResult';\n\n\n\nclass PostFix extends React.Component{\n    state = {\n        answer: undefined,\n        error: undefined\n    }\n    handleExpression = (e) =>\n    {\n        e.preventDefault();\n        let expression = e.target.elements.exp.value.trimStart();\n        if(expression === \"\")\n        {\n            this.setState({error: \"Field cannot be empty\"})\n        }\n        else\n        {\n            // 'evaluate()' will returns -1 for an invalid expression\n            let answer = evaluate(expression);\n        \n            if(answer === -1 || answer === undefined){\n                this.setState({\n                    answer: undefined, \n                    error:\"Not a valid Postfix expression\"\n                  });\n            }\n            else{\n                this.setState({\n                    answer: answer,\n                    error: undefined\n                });\n                e.target.elements.exp.value = \"\";\n            } \n        }\n    }\n    render()\n    {\n        let title = \"Evaluate a Postfix expression\";\n        let link = \"https://fran6is.github.io/portfolio/\";\n        return (<div>\n                    <Header link={link} title={title}/>\n                    <div className=\"container\">\n                        \n                        {\n                            this.state.error && \n                            <p className=\"error-msg\" >{this.state.error}</p>\n                        }\n                        <Input handleExpression={this.handleExpression}/>\n                        <DisplayResult answer={this.state.answer}/>\n                    </div>\n               </div>);\n    }\n}\n\nReactDOM.render(<PostFix />, document.getElementById('root'));\n"],"sourceRoot":""}